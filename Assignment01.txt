TASK01
CONNECTED OR NOT
#include <bits/stdc++.h>
using namespace std;
bool adj_matrix[1005][1005];  
int main(){
    int N,E;
    cin>> N >> E;
    for(int i = 0; i < N; i++){
        for(int j = 0; j < N; j++){
            adj_matrix[i][j] = false;
        }
    }
    for (int i = 0; i < E; i++) {
        int A, B;
        cin >> A >> B;
        adj_matrix[A][B] = true;  
    }
    int Q;
    cin >> Q;
    while (Q--){
        int A, B;
        cin >> A >> B;
        if(adj_matrix[A][B] || A==B){
            cout << "YES\n";
        } 
        else{
            cout << "NO\n";
        }
    }

    return 0;
}
TASK02
CONNECTED NODES
#include <bits/stdc++.h>
using namespace std;
int main() {
    int N, E;
    cin >> N >> E;
    vector<vector<int>> adj_list(N); 
    for (int i = 0; i < E; i++) {
        int A, B;
        cin >> A >> B;
        adj_list[A].push_back(B);
        adj_list[B].push_back(A);
    }
    int Q;
    cin >> Q;
    while (Q--) {
        int X;
        cin >> X;
        vector<int> connected = adj_list[X];
        if(connected.empty()){
            cout << "-1" << endl; 
        } 
        else{
            sort(connected.rbegin(), connected.rend());
            for (int node : connected) {
                cout << node << " ";
            }
            cout << endl;
        }
    }

    return 0;
}
TASK03
CAN GO?
#include <bits/stdc++.h>
using namespace std;
int N, M;  
vector<string> grid;  
vector<vector<bool>> visited;  
int dx[] = {-1, 1, 0, 0};
int dy[] = {0, 0, -1, 1};
bool isValid(int x, int y){
    return x>=0 && x<N && y>=0 && y<M && grid[x][y] != '#' && !visited[x][y];
}
bool bfs(int startX, int startY, int endX, int endY) {
    queue<pair<int, int>> q;
    q.push({startX, startY});
    visited[startX][startY] = true;
    while (!q.empty()) {
        int x = q.front().first;
        int y = q.front().second;
        q.pop();
        if(x == endX && y == endY){
            return true;
        }
        for(int i = 0; i < 4; i++){
            int newX = x + dx[i];
            int newY = y + dy[i];
            if(isValid(newX, newY)){
                visited[newX][newY] = true;
                q.push({newX, newY});
            }
        }
    }
    return false;  
}
int main(){
    cin >> N >> M;
    grid.resize(N);
    visited.resize(N, vector<bool>(M, false));
    int startX, startY, endX, endY;
    for(int i = 0; i < N; i++){
        cin >> grid[i];
        for(int j = 0; j < M; j++){
            if(grid[i][j] == 'A'){
                startX = i;
                startY = j;
            } 
            else if(grid[i][j] == 'B'){
                endX = i;
                endY = j;
            }
        }
    }
    if(bfs(startX, startY, endX, endY)){
        cout << "YES" << endl;
    } 
    else{
        cout << "NO" << endl;
    }
    return 0;
}
TASK04
COUNT APARTMENTS
#include <bits/stdc++.h>
using namespace std;
int N, M;
vector<string> grid;
vector<vector<bool>> vis;
int dx[] = {-1, 1, 0, 0};  
int dy[] = {0, 0, -1, 1};  
bool isValid(int x, int y){
    return x>=0 && x<N && y>=0 && y<M && grid[x][y] == '.' && !vis[x][y];
}
void dfs(int x, int y){
    vis[x][y] = true;
    for(int i = 0; i < 4; i++){
        int newX = x + dx[i];
        int newY = y + dy[i];
        if(isValid(newX, newY)){
            dfs(newX, newY);
        }
    }
}
int main(){
    cin >> N >> M;
    grid.resize(N);
    vis.resize(N, vector<bool>(M, false));
    for(int i = 0; i < N; i++){
        cin >> grid[i];
    }
    int Count = 0;
    for(int i = 0; i < N; i++){
        for(int j = 0; j < M; j++){
            if(grid[i][j] == '.' && !vis[i][j]){
                dfs(i, j);
                Count++;
            }
        }
    }
    cout << Count << endl;
    return 0;
}
TASK05
COUNT APARTMENTS 2
#include <bits/stdc++.h>
using namespace std;
int N, M;
vector<string> grid;
vector<vector<bool>> vis;

int dx[] = {-1, 1, 0, 0};  
int dy[] = {0, 0, -1, 1};  
bool isValid(int x, int y) {
    return x >= 0 && x < N && y >= 0 && y < M && grid[x][y] == '.' && !vis[x][y];
}
int dfs(int x, int y){
    vis[x][y] = true;
    int size = 1;
    for (int i=0;i<4;i++) {
        int newX = x + dx[i];
        int newY = y + dy[i];
        if(isValid(newX, newY)){
            size += dfs(newX, newY);
        }
    }
    return size;
}
int main(){
    cin >> N >> M;
    grid.resize(N);
   vis.resize(N, vector<bool>(M, false));
    for(int i=0;i<N;i++){
        cin >> grid[i];
    }
    vector<int> Sizes;
    for(int i = 0; i < N; i++){
        for(int j=0;j<M;j++){
            if(grid[i][j] == '.' && !vis[i][j]){
                int size = dfs(i, j);
                Sizes.push_back(size);
            }
        }
    }
    if (Sizes.empty()) {
        cout << 0 << endl;
    } 
    else{
        sort(Sizes.begin(),Sizes.end()); 
        for (int x : Sizes) {
            cout << x << " ";
        }
        cout << endl;
    }
    return 0;
}