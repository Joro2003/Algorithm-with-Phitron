count_sub_islands.cpp
class Solution {
public:
    bool vis[505][505];
    vector<pair<int,int>> d = {{-1,0},{1,0},{0,-1},{0,1}};
    int n,m;
    bool flag;

    bool valid(int i, int j)
    {
        if(i<0 || i>=n || j<0 || j>=m)
            return false;
        return true;
    }

    void dfs(int si, int sj, vector<vector<int>>& grid1, vector<vector<int>>& grid2)
    {
        vis[si][sj] = true;
        if(grid1[si][sj]==0)
            flag = false;
        
        for(int i=0;i<4;i++)
        {
            int ci = si + d[i].first;
            int cj = sj + d[i].second;
            if(valid(ci,cj) && !vis[ci][cj] && grid2[ci][cj]==1)
                dfs(ci,cj,grid1,grid2);
        }
    }

    int countSubIslands(vector<vector<int>>& grid1, vector<vector<int>>& grid2) {
        int cnt = 0;
        n = grid1.size();
        m = grid1[0].size();
        memset(vis,false,sizeof(vis));
        for(int i=0;i<n;i++)
            for(int j=0;j<m;j++)
                if(!vis[i][j] && grid2[i][j]==1)
                {
                    flag = true;
                    dfs(i,j,grid1,grid2);
                    if(flag)
                        cnt++;
                }
        return cnt;            
    }
};
find_if_path_exists_in_graph.cpp
class Solution {
public:
    vector<int> adj_list[200005];
    bool vis[200005];

    void dfs(int src)
    {
        vis[src] = true;
        for(int child : adj_list[src])
        {
            if(!vis[child])
                dfs(child);
        }
    }

    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
        for(int i=0;i<edges.size();i++)
        {
            int a = edges[i][0];
            int b = edges[i][1];
            adj_list[a].push_back(b);
            adj_list[b].push_back(a);
        }
        memset(vis,false,sizeof(vis));
        dfs(source);
        return vis[destination];
    }
};
island_perimeter.cpp
class Solution {
public:
    int cnt;
    bool vis[105][105];
    vector<pair<int,int>> d = {{0,1},{0,-1},{1,0},{-1,0}};
    int n,m;

    bool valid(int i,int j)
    {
        if(i<0 || i>=n || j<0 || j>=m)
            return false;
        return true;
    }

    void dfs(int si,int sj,vector<vector<int>>& grid)
    {
        vis[si][sj] = true;
        for(int i=0;i<4;i++)
        {
            int ci = si + d[i].first;
            int cj = sj + d[i].second;
            if(valid(ci,cj)==false)
                cnt++;
            else if(valid(ci,cj)==true && grid[ci][cj]==0)
                cnt++;
            else if(valid(ci,cj)==true && !vis[ci][cj] && grid[ci][cj]==1)
                dfs(ci,cj,grid);
        }
    }

    int islandPerimeter(vector<vector<int>>& grid) {
        cnt = 0;
        n = grid.size();
        m = grid[0].size();
        memset(vis,false,sizeof(vis));
        for(int i=0;i<n;i++)
            for(int j=0;j<m;j++)
                if(!vis[i][j] && grid[i][j]==1)
                    dfs(i,j,grid);
        return cnt;
    }
};
max_area_of_island.cpp
class Solution {
public:
    bool vis[55][55];
    vector<pair<int,int>> d =  {{0,-1},{0,1},{-1,0},{1,0}};
    int n,m,cnt,mx;

    bool valid(int i, int j)
    {
        if(i<0 || i>=n || j<0 || j>=m)
            return false;
        return true;
    }

    void dfs(int si, int sj, vector<vector<int>>& grid)
    {
        vis[si][sj] = true;
        cnt++;
        for(int i=0;i<4;i++)
        {
            int ci = si + d[i].first;
            int cj = sj + d[i].second;
            if(valid(ci,cj) && !vis[ci][cj] && grid[ci][cj]==1)
                dfs(ci,cj,grid);
        }
    }

    int maxAreaOfIsland(vector<vector<int>>& grid) {
        n = grid.size();
        m = grid[0].size();
        mx = 0;
        memset(vis,false,sizeof(vis));
        for(int i=0;i<n;i++)
            for(int j=0;j<m;j++)
                if(!vis[i][j] && grid[i][j]==1)
                {
                    cnt = 0;
                    dfs(i,j,grid);
                    mx = max(cnt,mx);
                }
        return mx;
    }
};
number_of_closed_islands_bfs.cpp
class Solution {
public:
    bool vis[105][105];
    vector<pair<int,int>> d = {{-1,0},{1,0},{0,-1},{0,1}};
    int n,m;
    bool flag;

    bool valid(int i, int j)
    {
        if(i<0 || i>=n || j<0 || j>=m)
            return false;
        return true;
    }

    void bfs(int si, int sj, vector<vector<int>>& grid)
    {
        queue<pair<int,int>> q;
        q.push({si,sj});
        vis[si][sj] = true;
        while(!q.empty())
        {
            pair<int,int> par = q.front();
            q.pop();
            int par_i = par.first;
            int par_j = par.second;
            for(int i=0;i<4;i++)
            {
                int ci = par_i + d[i].first;
                int cj = par_j + d[i].second;
                if(!valid(ci,cj))
                    flag = false;
                if(valid(ci,cj) && !vis[ci][cj] && grid[ci][cj]==0)
                {
                    q.push({ci,cj});
                    vis[ci][cj] = true;
                }
            }
        }
    }
    int closedIsland(vector<vector<int>>& grid) {
        int cnt = 0;
        n = grid.size();
        m = grid[0].size();
        memset(vis,false,sizeof(vis));
        for(int i=0;i<n;i++)
            for(int j=0;j<m;j++)
                if(!vis[i][j] && grid[i][j]==0)
                {
                    flag = true;
                    bfs(i,j,grid);
                    if(flag)
                        cnt++;
                }
        return cnt; 
    }
};
number_of_closed_islands_dfs.cpp
class Solution {
public:
    bool vis[105][105];
    vector<pair<int,int>> d = {{-1,0},{1,0},{0,-1},{0,1}};
    int n,m;
    bool flag;

    bool valid(int i, int j)
    {
        if(i<0 || i>=n || j<0 || j>=m)
            return false;
        return true;
    }

    void dfs(int si, int sj, vector<vector<int>>& grid)
    {
        vis[si][sj] = true;
        
        for(int i=0;i<4;i++)
        {
            int ci = si + d[i].first;
            int cj = sj + d[i].second;
            if(!valid(ci,cj))
                flag = false;
            if(valid(ci,cj) && !vis[ci][cj] && grid[ci][cj]==0)
                dfs(ci,cj,grid);
        }
    }
    int closedIsland(vector<vector<int>>& grid) {
        int cnt = 0;
        n = grid.size();
        m = grid[0].size();
        memset(vis,false,sizeof(vis));
        for(int i=0;i<n;i++)
            for(int j=0;j<m;j++)
                if(!vis[i][j] && grid[i][j]==0)
                {
                    flag = true;
                    dfs(i,j,grid);
                    if(flag)
                        cnt++;
                }
        return cnt; 
    }
};
number_of_islands.cpp
class Solution {
public:
    bool vis[305][305];
    vector<pair<int,int>> d =  {{0,-1},{0,1},{-1,0},{1,0}};
    int n,m;

    bool valid(int i, int j)
    {
        if(i<0 || i>=n || j<0 || j>=m)
            return false;
        return true;
    }

    void dfs(int si, int sj, vector<vector<char>>& grid)
    {
        vis[si][sj] = true;
        for(int i=0;i<4;i++)
        {
            int ci = si + d[i].first;
            int cj = sj + d[i].second;
            if(valid(ci,cj) && !vis[ci][cj] && grid[ci][cj]=='1')
                dfs(ci,cj,grid);
        }
    }

    int numIslands(vector<vector<char>>& grid) {
        n = grid.size();
        m = grid[0].size();
        int cnt = 0;
        memset(vis,false,sizeof(vis));
        for(int i=0;i<n;i++)
            for(int j=0;j<m;j++)
                if(!vis[i][j] && grid[i][j]=='1')
                {
                    dfs(i,j,grid);
                    cnt++;
                }
        return cnt;
    }
};
